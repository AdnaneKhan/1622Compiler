import java_cup.runtime.Symbol;
import java.util.LinkedList;
import SyntaxTree.*;

/* Preliminaries to use the scanner.  */
scan with {: return lexer.next_token(); :};

parser code {:
MiniJavaLexer lexer;

public parser(MiniJavaLexer lex) {
    super(lex);
    lexer = lex;
}

public void printError(int line, int column) {
    System.out.println("There is a parse error at line " + line+1 + ", column " + column+1);
}


:}

/* Terminals (no values) */

terminal LEFT_CURLY;
terminal RIGHT_CURLY;
terminal CLASS;
terminal STRING;
terminal PUBLIC;
terminal VOID_MAIN;
terminal STATIC;
terminal EXTENDS;
terminal SEMI;
terminal RETURN;
terminal INT;
terminal BOOLEAN;
terminal IF;
terminal ELSE;
terminal WHILE;
terminal PRINT;
terminal ASSIGN;
terminal LEFT_B;
terminal RIGHT_B;
terminal PLUS;
terminal MINUS;
terminal TIMES;
terminal TRUE;
terminal FALSE;
terminal THIS;
terminal DOT;
terminal LENGTH;
terminal NEW;
terminal NOT;
terminal LEFT_PAREN;
terminal RIGHT_PAREN;
terminal COMMA;
terminal UNKNOWN;
terminal LESS;
terminal AND;

/* Value Terminals */

terminal Integer INTEGER_LITERAL;
terminal Identifier ID;

/* NON TERMINALS */
non terminal Exp Exp;
non terminal ExpList ExpRest;
non terminal ExpList ExpList;
non terminal ClassDecl ClassDecl;
non terminal VarDecl VarDecl;
non terminal VarDeclList VarDeclList;
non terminal MethodDeclList MethodDeclList;
non terminal MethodDecl MethodDecl;
non terminal FormalList FormalList;
non terminal Type Type;
non terminal Program MiniJavaProgram;
non terminal MainClass mainclass;
non terminal ClassDeclList ClassDeclList;
non terminal StatementList StatementList;
non terminal FormalList FormalRest;
non terminal Statement Statement;
non terminal Formal Formal;
non terminal FormalList FormalSeparate;
non terminal ExpList ExpSeparate;
non terminal Identifier MainParams;
non terminal Statement MainMethod;

/*
Mathematical Precedence
 Using precedence for JAVA
 http://docs.oracle.com/javase/tutorial/java/nutsandbolts/operators.html
*/


precedence left AND;
precedence left LESS;
precedence left PLUS, MINUS;
precedence left TIMES;
precedence right NOT;

start with MiniJavaProgram;

MiniJavaProgram ::= mainclass:m ClassDeclList:d {: RESULT = new Program(m, d,mleft,mright); :};

mainclass ::= CLASS ID:name LEFT_CURLY PUBLIC STATIC VOID_MAIN MainParams:args MainMethod:s RIGHT_CURLY {: RESULT = new MainClass(name,args,s,nameleft,nameright); :}
        ;

MainParams ::= LEFT_PAREN STRING LEFT_B RIGHT_B ID:args RIGHT_PAREN {: RESULT = args; :}
        |      error:e RIGHT_PAREN {: parser.printError(eleft,eright); RESULT = new Identifier("ERROR",eleft,eright); :}
        ;

MainMethod ::= LEFT_CURLY Statement:s RIGHT_CURLY {: RESULT = s; :}
        | error:e RIGHT_CURLY {: parser.printError(eleft,eright); RESULT = new ErroneousStatement(eleft,eright); :}
        ;

ClassDeclList ::=  ClassDeclList:cdl ClassDecl:cd {: cdl.addElement(cd); RESULT = cdl; :}
        | {: RESULT = new ClassDeclList(); :}
        ;


ClassDecl ::= CLASS ID:name LEFT_CURLY VarDeclList:v MethodDeclList:mdl RIGHT_CURLY {: RESULT = new ClassDeclSimple(name,v,mdl,nameleft,nameright); :}
        | CLASS ID:name EXTENDS ID:parent LEFT_CURLY VarDeclList:v MethodDeclList:mdl RIGHT_CURLY {: RESULT = new ClassDeclExtends(name,parent,v,mdl,nameleft,nameright); :}
        | error:e RIGHT_CURLY {: parser.printError(eleft, eright); RESULT = new ErroneousClassDecl();  :}
        ;

VarDeclList ::= VarDeclList:vdl VarDecl:vd  {: vdl.addElement(vd); RESULT = vdl; :}
       | {: RESULT = new VarDeclList(); :}
       ;

VarDecl ::= Type:t ID:i SEMI {: RESULT = new VarDecl(t,i,tleft,tright); :}
        | error:e SEMI {: parser.printError(eleft, eright); RESULT = new ErroneousDecl(eleft,eright); :}
        ;

MethodDeclList ::= MethodDeclList:mdl MethodDecl:md  {: mdl.addElement(md); RESULT = mdl; :}
       | {: RESULT = new MethodDeclList(); :}
       ;

MethodDecl ::= PUBLIC Type:t ID:i LEFT_PAREN FormalSeparate:fl LEFT_CURLY VarDeclList:v StatementList:sl RETURN Exp:e SEMI RIGHT_CURLY {: RESULT = new MethodDecl(t,i,fl,v,sl,e,ileft,iright); :}
        | error:e RIGHT_CURLY {: parser.printError(eleft, eright);  :}
        ;

FormalSeparate ::=  FormalList:fl RIGHT_PAREN {: RESULT = fl; :}
        | error:e RIGHT_PAREN {: parser.printError(eleft,eright); RESULT = new ErroneousFormalList(); :}
        ;

FormalList ::= FormalRest:fr Formal:f {: fr.addElement( f ); RESULT = fr; :}
        | {: RESULT = new FormalList(); :}
        ;

FormalRest ::= FormalRest:fr Formal:f COMMA {: fr.addElement(f); RESULT = fr; :}
        | {: RESULT = new FormalList(); :}
        ;

Formal ::= Type:t ID:i {: RESULT = new Formal(t,i,tleft,tright); :}
        ;

Type ::= INT LEFT_B RIGHT_B {: RESULT = new IntArrayType(); :}
        | BOOLEAN {: RESULT = new BooleanType(); :}
        | INT {: RESULT = new IntegerType(); :}
        | ID:i {: RESULT = new IdentifierType(i.toString(),ileft,iright); :}
        ;

StatementList ::= Statement:s  StatementList:sl {: sl.addElement(s); RESULT = sl; :}
        | {: RESULT = new StatementList(); :}
        ;

Statement ::= LEFT_CURLY StatementList:sl RIGHT_CURLY {: RESULT = new Block(sl,slleft,slright); :}
       | IF LEFT_PAREN Exp:e RIGHT_PAREN Statement:s1 ELSE Statement:s2 {: RESULT = new If(e,s1,s2,eleft,eright); :}
       | WHILE LEFT_PAREN Exp:e RIGHT_PAREN Statement:s1 {: RESULT = new While(e,s1,eleft,eright); :}
       | PRINT LEFT_PAREN Exp:e RIGHT_PAREN SEMI {: RESULT = new Print(e,eleft,eright); :}
       | ID:i ASSIGN Exp:e SEMI {: RESULT = new Assign(i,e,ileft,iright); :}
       | ID:i LEFT_B Exp:e RIGHT_B ASSIGN Exp:e1 SEMI {: RESULT = new ArrayAssign(i,e,e1,ileft,iright); :}
       | error:e SEMI {: parser.printError(eleft,eright); RESULT = new ErroneousStatement(eleft,eright); :}
       ;

Exp ::=  Exp:e PLUS Exp:e1 {: RESULT = new Plus(e,e1,eleft,eright); :}
       | Exp:e TIMES Exp:e1 {: RESULT = new Times(e,e1,eleft,eright); :}
       | Exp:e MINUS Exp:e1 {: RESULT = new Minus(e,e1,eleft,eright); :}
       | Exp:e LESS Exp:e1 {: RESULT = new LessThan(e,e1,eleft,eright); :}
       | Exp:e AND Exp:e1 {: RESULT = new And(e,e1,eleft,eright); :}
       | Exp:e LEFT_B Exp:e1 RIGHT_B {: RESULT = new ArrayLookup(e,e1,eleft,eright); :}
       | Exp:e DOT LENGTH {: RESULT = new ArrayLength(e,eleft,eright); :}
       | Exp:e DOT ID:i ExpSeparate:el {: RESULT = new Call(e,i,el,ileft,iright); :}
       | INTEGER_LITERAL:i {: RESULT = new IntegerLiteral(i,ileft,iright);  :}
       | TRUE:t {: RESULT = new True(tleft,tright); :}
       | FALSE:f {: RESULT = new False(fleft,fright); :}
       | ID:i {: RESULT = new IdentifierExp(i.toString(),ileft,iright); :}
       | THIS:t {: RESULT = new This(tleft,tright); :}
       | NEW INT LEFT_B Exp:e RIGHT_B {: RESULT = new NewArray(e,eleft,eright); :}
       | NEW ID:i LEFT_PAREN RIGHT_PAREN {: RESULT = new NewObject(i,ileft,iright); :}
       | NOT Exp:e {: RESULT = new Not(e,eleft,eright); :}
       | LEFT_PAREN Exp:e RIGHT_PAREN {: RESULT = e; :}
       ;

ExpSeparate ::= LEFT_PAREN ExpList:el RIGHT_PAREN {: RESULT = el; :}
        | LEFT_PAREN error:e RIGHT_PAREN {: RESULT = new ErroneousExpList(); :}
        ;

ExpList ::=  ExpRest:er Exp:e  {: er.addElement(e); RESULT = er; :}
        | {: RESULT = new ExpList(); :}
        ;

ExpRest ::=  ExpRest:er Exp:e COMMA{: er.addElement(e); RESULT = er; :}
        | {: RESULT = new ExpList(); :}
        ;