
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Apr 06 11:23:00 EDT 2015
//----------------------------------------------------

import java_cup.runtime.Symbol;
import java.util.LinkedList;
import SyntaxTree.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Apr 06 11:23:00 EDT 2015
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\077\000\002\002\004\000\002\014\004\000\002\015" +
    "\013\000\002\025\010\000\002\025\004\000\002\026\005" +
    "\000\002\026\004\000\002\016\004\000\002\016\002\000" +
    "\002\005\010\000\002\005\012\000\002\005\004\000\002" +
    "\007\004\000\002\007\002\000\002\006\005\000\002\006" +
    "\004\000\002\010\004\000\002\010\002\000\002\011\016" +
    "\000\002\011\004\000\002\023\004\000\002\023\004\000" +
    "\002\012\004\000\002\012\002\000\002\020\005\000\002" +
    "\020\002\000\002\022\004\000\002\013\005\000\002\013" +
    "\003\000\002\013\003\000\002\013\003\000\002\017\004" +
    "\000\002\017\002\000\002\021\005\000\002\021\011\000" +
    "\002\021\007\000\002\021\007\000\002\021\006\000\002" +
    "\021\011\000\002\021\004\000\002\002\005\000\002\002" +
    "\005\000\002\002\005\000\002\002\005\000\002\002\005" +
    "\000\002\002\006\000\002\002\005\000\002\002\006\000" +
    "\002\002\003\000\002\002\003\000\002\002\003\000\002" +
    "\002\003\000\002\002\003\000\002\002\007\000\002\002" +
    "\006\000\002\002\004\000\002\002\005\000\002\024\005" +
    "\000\002\024\005\000\002\004\004\000\002\004\002\000" +
    "\002\003\005\000\002\003\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\235\000\004\006\005\001\002\000\010\002\ufff9\003" +
    "\ufff9\006\ufff9\001\002\000\004\050\010\001\002\000\004" +
    "\002\007\001\002\000\004\002\001\001\002\000\004\004" +
    "\011\001\002\000\004\010\012\001\002\000\004\012\013" +
    "\001\002\000\004\011\014\001\002\000\006\003\016\041" +
    "\017\001\002\000\006\003\030\004\027\001\002\000\004" +
    "\042\025\001\002\000\004\007\020\001\002\000\004\025" +
    "\021\001\002\000\004\026\022\001\002\000\004\050\023" +
    "\001\002\000\004\042\024\001\002\000\006\003\ufffe\004" +
    "\ufffe\001\002\000\006\003\ufffd\004\ufffd\001\002\000\004" +
    "\005\151\001\002\000\016\003\035\004\033\020\040\022" +
    "\037\023\034\050\032\001\002\000\004\005\031\001\002" +
    "\000\004\005\ufffb\001\002\000\006\024\141\025\140\001" +
    "\002\000\020\003\035\004\033\005\uffe1\020\040\022\037" +
    "\023\034\050\032\001\002\000\004\041\130\001\002\000" +
    "\004\014\127\001\002\000\004\005\126\001\002\000\004" +
    "\041\122\001\002\000\004\041\041\001\002\000\022\032" +
    "\043\033\045\034\050\037\042\040\051\041\046\047\052" +
    "\050\047\001\002\000\006\016\114\050\113\001\002\000" +
    "\030\014\uffd0\025\uffd0\026\uffd0\027\uffd0\030\uffd0\031\uffd0" +
    "\035\uffd0\042\uffd0\043\uffd0\045\uffd0\046\uffd0\001\002\000" +
    "\022\025\056\027\055\030\057\031\061\035\062\042\107" +
    "\045\060\046\054\001\002\000\030\014\uffcf\025\uffcf\026" +
    "\uffcf\027\uffcf\030\uffcf\031\uffcf\035\uffcf\042\uffcf\043\uffcf" +
    "\045\uffcf\046\uffcf\001\002\000\022\032\043\033\045\034" +
    "\050\037\042\040\051\041\046\047\052\050\047\001\002" +
    "\000\030\014\uffce\025\uffce\026\uffce\027\uffce\030\uffce\031" +
    "\uffce\035\uffce\042\uffce\043\uffce\045\uffce\046\uffce\001\002" +
    "\000\030\014\uffcd\025\uffcd\026\uffcd\027\uffcd\030\uffcd\031" +
    "\uffcd\035\uffcd\042\uffcd\043\uffcd\045\uffcd\046\uffcd\001\002" +
    "\000\022\032\043\033\045\034\050\037\042\040\051\041" +
    "\046\047\052\050\047\001\002\000\030\014\uffd1\025\uffd1" +
    "\026\uffd1\027\uffd1\030\uffd1\031\uffd1\035\uffd1\042\uffd1\043" +
    "\uffd1\045\uffd1\046\uffd1\001\002\000\030\014\uffca\025\056" +
    "\026\uffca\027\055\030\057\031\061\035\062\042\uffca\043" +
    "\uffca\045\060\046\054\001\002\000\022\032\043\033\045" +
    "\034\050\037\042\040\051\041\046\047\052\050\047\001" +
    "\002\000\022\032\043\033\045\034\050\037\042\040\051" +
    "\041\046\047\052\050\047\001\002\000\022\032\043\033" +
    "\045\034\050\037\042\040\051\041\046\047\052\050\047" +
    "\001\002\000\022\032\043\033\045\034\050\037\042\040" +
    "\051\041\046\047\052\050\047\001\002\000\022\032\043" +
    "\033\045\034\050\037\042\040\051\041\046\047\052\050" +
    "\047\001\002\000\022\032\043\033\045\034\050\037\042" +
    "\040\051\041\046\047\052\050\047\001\002\000\006\036" +
    "\064\050\063\001\002\000\004\041\066\001\002\000\030" +
    "\014\uffd3\025\uffd3\026\uffd3\027\uffd3\030\uffd3\031\uffd3\035" +
    "\uffd3\042\uffd3\043\uffd3\045\uffd3\046\uffd3\001\002\000\030" +
    "\014\uffd2\025\uffd2\026\uffd2\027\uffd2\030\uffd2\031\uffd2\035" +
    "\uffd2\042\uffd2\043\uffd2\045\uffd2\046\uffd2\001\002\000\026" +
    "\003\067\032\uffc3\033\uffc3\034\uffc3\037\uffc3\040\uffc3\041" +
    "\uffc3\042\uffc5\047\uffc3\050\uffc3\001\002\000\004\042\075" +
    "\001\002\000\022\032\043\033\045\034\050\037\042\040" +
    "\051\041\046\047\052\050\047\001\002\000\004\042\072" +
    "\001\002\000\030\014\uffc8\025\uffc8\026\uffc8\027\uffc8\030" +
    "\uffc8\031\uffc8\035\uffc8\042\uffc8\043\uffc8\045\uffc8\046\uffc8" +
    "\001\002\000\024\025\056\027\055\030\057\031\061\035" +
    "\062\042\uffc6\043\074\045\060\046\054\001\002\000\022" +
    "\032\uffc4\033\uffc4\034\uffc4\037\uffc4\040\uffc4\041\uffc4\047" +
    "\uffc4\050\uffc4\001\002\000\030\014\uffc7\025\uffc7\026\uffc7" +
    "\027\uffc7\030\uffc7\031\uffc7\035\uffc7\042\uffc7\043\uffc7\045" +
    "\uffc7\046\uffc7\001\002\000\030\014\uffd8\025\uffd8\026\uffd8" +
    "\027\uffd8\030\uffd8\031\uffd8\035\uffd8\042\uffd8\043\uffd8\045" +
    "\uffd8\046\uffd8\001\002\000\030\014\uffd6\025\uffd6\026\uffd6" +
    "\027\055\030\057\031\061\035\uffd6\042\uffd6\043\uffd6\045" +
    "\uffd6\046\uffd6\001\002\000\030\014\uffd7\025\uffd7\026\uffd7" +
    "\027\uffd7\030\uffd7\031\061\035\uffd7\042\uffd7\043\uffd7\045" +
    "\uffd7\046\uffd7\001\002\000\022\025\056\026\102\027\055" +
    "\030\057\031\061\035\062\045\060\046\054\001\002\000" +
    "\030\014\uffd4\025\uffd4\026\uffd4\027\uffd4\030\uffd4\031\uffd4" +
    "\035\uffd4\042\uffd4\043\uffd4\045\uffd4\046\uffd4\001\002\000" +
    "\030\014\uffd9\025\uffd9\026\uffd9\027\uffd9\030\uffd9\031\061" +
    "\035\uffd9\042\uffd9\043\uffd9\045\uffd9\046\uffd9\001\002\000" +
    "\030\014\uffd5\025\uffd5\026\uffd5\027\055\030\057\031\061" +
    "\035\uffd5\042\uffd5\043\uffd5\045\060\046\uffd5\001\002\000" +
    "\022\025\056\027\055\030\057\031\061\035\062\042\106" +
    "\045\060\046\054\001\002\000\030\014\uffc9\025\uffc9\026" +
    "\uffc9\027\uffc9\030\uffc9\031\uffc9\035\uffc9\042\uffc9\043\uffc9" +
    "\045\uffc9\046\uffc9\001\002\000\016\003\035\004\033\020" +
    "\040\022\037\023\034\050\032\001\002\000\004\021\111" +
    "\001\002\000\016\003\035\004\033\020\040\022\037\023" +
    "\034\050\032\001\002\000\024\003\uffdf\004\uffdf\005\uffdf" +
    "\015\uffdf\020\uffdf\021\uffdf\022\uffdf\023\uffdf\050\uffdf\001" +
    "\002\000\004\041\120\001\002\000\004\025\115\001\002" +
    "\000\022\032\043\033\045\034\050\037\042\040\051\041" +
    "\046\047\052\050\047\001\002\000\022\025\056\026\117" +
    "\027\055\030\057\031\061\035\062\045\060\046\054\001" +
    "\002\000\030\014\uffcc\025\uffcc\026\uffcc\027\uffcc\030\uffcc" +
    "\031\uffcc\035\uffcc\042\uffcc\043\uffcc\045\uffcc\046\uffcc\001" +
    "\002\000\004\042\121\001\002\000\030\014\uffcb\025\uffcb" +
    "\026\uffcb\027\uffcb\030\uffcb\031\uffcb\035\uffcb\042\uffcb\043" +
    "\uffcb\045\uffcb\046\uffcb\001\002\000\022\032\043\033\045" +
    "\034\050\037\042\040\051\041\046\047\052\050\047\001" +
    "\002\000\022\025\056\027\055\030\057\031\061\035\062" +
    "\042\124\045\060\046\054\001\002\000\016\003\035\004" +
    "\033\020\040\022\037\023\034\050\032\001\002\000\024" +
    "\003\uffde\004\uffde\005\uffde\015\uffde\020\uffde\021\uffde\022" +
    "\uffde\023\uffde\050\uffde\001\002\000\004\005\ufffc\001\002" +
    "\000\024\003\uffda\004\uffda\005\uffda\015\uffda\020\uffda\021" +
    "\uffda\022\uffda\023\uffda\050\uffda\001\002\000\022\032\043" +
    "\033\045\034\050\037\042\040\051\041\046\047\052\050" +
    "\047\001\002\000\022\025\056\027\055\030\057\031\061" +
    "\035\062\042\132\045\060\046\054\001\002\000\004\014" +
    "\133\001\002\000\024\003\uffdd\004\uffdd\005\uffdd\015\uffdd" +
    "\020\uffdd\021\uffdd\022\uffdd\023\uffdd\050\uffdd\001\002\000" +
    "\022\003\035\004\033\005\uffe1\015\uffe1\020\040\022\037" +
    "\023\034\050\032\001\002\000\004\005\136\001\002\000" +
    "\024\003\uffe0\004\uffe0\005\uffe0\015\uffe0\020\uffe0\021\uffe0" +
    "\022\uffe0\023\uffe0\050\uffe0\001\002\000\006\005\uffe2\015" +
    "\uffe2\001\002\000\022\032\043\033\045\034\050\037\042" +
    "\040\051\041\046\047\052\050\047\001\002\000\022\032" +
    "\043\033\045\034\050\037\042\040\051\041\046\047\052" +
    "\050\047\001\002\000\022\014\143\025\056\027\055\030" +
    "\057\031\061\035\062\045\060\046\054\001\002\000\024" +
    "\003\uffdc\004\uffdc\005\uffdc\015\uffdc\020\uffdc\021\uffdc\022" +
    "\uffdc\023\uffdc\050\uffdc\001\002\000\022\025\056\026\145" +
    "\027\055\030\057\031\061\035\062\045\060\046\054\001" +
    "\002\000\004\024\146\001\002\000\022\032\043\033\045" +
    "\034\050\037\042\040\051\041\046\047\052\050\047\001" +
    "\002\000\022\014\150\025\056\027\055\030\057\031\061" +
    "\035\062\045\060\046\054\001\002\000\024\003\uffdb\004" +
    "\uffdb\005\uffdb\015\uffdb\020\uffdb\021\uffdb\022\uffdb\023\uffdb" +
    "\050\uffdb\001\002\000\010\002\uffff\003\uffff\006\uffff\001" +
    "\002\000\010\002\000\003\153\006\155\001\002\000\004" +
    "\005\237\001\002\000\010\002\ufffa\003\ufffa\006\ufffa\001" +
    "\002\000\004\050\156\001\002\000\006\004\157\013\160" +
    "\001\002\000\016\003\ufff4\005\ufff4\010\ufff4\016\ufff4\017" +
    "\ufff4\050\ufff4\001\002\000\004\050\161\001\002\000\004" +
    "\004\162\001\002\000\016\003\ufff4\005\ufff4\010\ufff4\016" +
    "\ufff4\017\ufff4\050\ufff4\001\002\000\016\003\166\005\ufff0" +
    "\010\ufff0\016\172\017\171\050\164\001\002\000\004\050" +
    "\uffe3\001\002\000\004\050\232\001\002\000\004\014\231" +
    "\001\002\000\030\003\ufff5\004\ufff5\005\ufff5\010\ufff5\015" +
    "\ufff5\016\ufff5\017\ufff5\020\ufff5\022\ufff5\023\ufff5\050\ufff5" +
    "\001\002\000\010\003\175\005\176\010\200\001\002\000" +
    "\004\050\uffe5\001\002\000\006\025\173\050\uffe4\001\002" +
    "\000\004\026\174\001\002\000\004\050\uffe6\001\002\000" +
    "\004\005\230\001\002\000\010\002\ufff7\003\ufff7\006\ufff7" +
    "\001\002\000\010\003\ufff1\005\ufff1\010\ufff1\001\002\000" +
    "\010\016\172\017\171\050\164\001\002\000\004\050\202" +
    "\001\002\000\004\041\203\001\002\000\014\003\205\016" +
    "\uffe8\017\uffe8\042\uffea\050\uffe8\001\002\000\004\042\227" +
    "\001\002\000\004\042\226\001\002\000\004\004\214\001" +
    "\002\000\010\016\172\017\171\050\164\001\002\000\004" +
    "\050\213\001\002\000\006\042\uffeb\043\212\001\002\000" +
    "\010\016\uffe9\017\uffe9\050\uffe9\001\002\000\006\042\uffe7" +
    "\043\uffe7\001\002\000\024\003\ufff4\004\ufff4\015\ufff4\016" +
    "\ufff4\017\ufff4\020\ufff4\022\ufff4\023\ufff4\050\ufff4\001\002" +
    "\000\024\003\220\004\033\015\uffe1\016\172\017\171\020" +
    "\040\022\037\023\034\050\217\001\002\000\004\015\222" +
    "\001\002\000\010\024\141\025\140\050\uffe3\001\002\000" +
    "\004\014\221\001\002\000\024\003\ufff2\004\ufff2\015\ufff2" +
    "\016\ufff2\017\ufff2\020\ufff2\022\ufff2\023\ufff2\050\ufff2\001" +
    "\002\000\022\032\043\033\045\034\050\037\042\040\051" +
    "\041\046\047\052\050\047\001\002\000\022\014\224\025" +
    "\056\027\055\030\057\031\061\035\062\045\060\046\054" +
    "\001\002\000\004\005\225\001\002\000\010\003\uffef\005" +
    "\uffef\010\uffef\001\002\000\004\004\uffec\001\002\000\004" +
    "\004\uffed\001\002\000\010\003\uffee\005\uffee\010\uffee\001" +
    "\002\000\016\003\ufff2\005\ufff2\010\ufff2\016\ufff2\017\ufff2" +
    "\050\ufff2\001\002\000\004\014\233\001\002\000\030\003" +
    "\ufff3\004\ufff3\005\ufff3\010\ufff3\015\ufff3\016\ufff3\017\ufff3" +
    "\020\ufff3\022\ufff3\023\ufff3\050\ufff3\001\002\000\016\003" +
    "\166\005\ufff0\010\ufff0\016\172\017\171\050\164\001\002" +
    "\000\010\003\175\005\236\010\200\001\002\000\010\002" +
    "\ufff8\003\ufff8\006\ufff8\001\002\000\010\002\ufff6\003\ufff6" +
    "\006\ufff6\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\235\000\006\014\005\015\003\001\001\000\004\016" +
    "\151\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\025\014\001\001\000\004" +
    "\026\025\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\021\035\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\017\134\021\133\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\002\043\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\002\104\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\002\052\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\002\103\001\001\000" +
    "\004\002\102\001\001\000\004\002\100\001\001\000\004" +
    "\002\077\001\001\000\004\002\076\001\001\000\004\002" +
    "\075\001\001\000\002\001\001\000\004\024\064\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\003\067\004" +
    "\070\001\001\000\002\001\001\000\004\002\072\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\021\107\001\001\000\002\001" +
    "\001\000\004\021\111\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\002\115\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\002\122\001\001\000\002\001\001\000" +
    "\004\021\124\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\002\130\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\017\136" +
    "\021\133\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\002\143\001\001\000\004\002\141" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\002\146\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\005" +
    "\153\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\007\233\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\007\162\001\001" +
    "\000\010\006\166\010\167\013\164\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\011\176\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\013\200\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\012\203" +
    "\020\206\023\205\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\013\207\022\210\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\007\214\001\001\000\012\006\166" +
    "\013\164\017\215\021\133\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\002\222\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\006\166\010\234\013\164\001\001\000\004" +
    "\011\176\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return lexer.next_token(); 
    }


MiniJavaLexer lexer;

public parser(MiniJavaLexer lex) {
    super(lex);
    lexer = lex;
}

public void printError(int line, int column) {

    line++;
    column++;
    System.out.println("There is a parse error at line " + line + ", column " + column);
}



}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // ExpRest ::= 
            {
              ExpList RESULT =null;
		 RESULT = new ExpList(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExpRest",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // ExpRest ::= ExpRest Exp COMMA 
            {
              ExpList RESULT =null;
		int erleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int erright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExpList er = (ExpList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 er.addElement(e); RESULT = er; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExpRest",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // ExpList ::= 
            {
              ExpList RESULT =null;
		 RESULT = new ExpList(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExpList",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // ExpList ::= ExpRest Exp 
            {
              ExpList RESULT =null;
		int erleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int erright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ExpList er = (ExpList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 er.addElement(e); RESULT = er; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExpList",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // ExpSeparate ::= LEFT_PAREN error RIGHT_PAREN 
            {
              ExpList RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ErroneousExpList(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExpSeparate",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // ExpSeparate ::= LEFT_PAREN ExpList RIGHT_PAREN 
            {
              ExpList RESULT =null;
		int elleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ExpList el = (ExpList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = el; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExpSeparate",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Exp ::= LEFT_PAREN Exp RIGHT_PAREN 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Exp ::= NOT Exp 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Not(e,eleft,eright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Exp ::= NEW ID LEFT_PAREN RIGHT_PAREN 
            {
              Exp RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new NewObject(i,ileft,iright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Exp ::= NEW INT LEFT_B Exp RIGHT_B 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new NewArray(e,eleft,eright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Exp ::= THIS 
            {
              Exp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new This(tleft,tright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Exp ::= ID 
            {
              Exp RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new IdentifierExp(i.toString(),ileft,iright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Exp ::= FALSE 
            {
              Exp RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new False(fleft,fright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Exp ::= TRUE 
            {
              Exp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new True(tleft,tright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Exp ::= INTEGER_LITERAL 
            {
              Exp RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new IntegerLiteral(i,ileft,iright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Exp ::= Exp DOT ID ExpSeparate 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int elright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpList el = (ExpList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Call(e,i,el,ileft,iright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Exp ::= Exp DOT LENGTH 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new ArrayLength(e,eleft,eright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Exp ::= Exp LEFT_B Exp RIGHT_B 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ArrayLookup(e,e1,eleft,eright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Exp ::= Exp AND Exp 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new And(e,e1,eleft,eright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Exp ::= Exp LESS Exp 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LessThan(e,e1,eleft,eright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Exp ::= Exp MINUS Exp 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Minus(e,e1,eleft,eright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Exp ::= Exp TIMES Exp 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Times(e,e1,eleft,eright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Exp ::= Exp PLUS Exp 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Plus(e,e1,eleft,eright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Statement ::= error SEMI 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 parser.printError(eleft,eright); RESULT = new ErroneousStatement(eleft,eright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Statement ::= ID LEFT_B Exp RIGHT_B ASSIGN Exp SEMI 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ArrayAssign(i,e,e1,ileft,iright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Statement ::= ID ASSIGN Exp SEMI 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Assign(i,e,ileft,iright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Statement ::= PRINT LEFT_PAREN Exp RIGHT_PAREN SEMI 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new Print(e,eleft,eright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Statement ::= WHILE LEFT_PAREN Exp RIGHT_PAREN Statement 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statement s1 = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new While(e,s1,eleft,eright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Statement ::= IF LEFT_PAREN Exp RIGHT_PAREN Statement ELSE Statement 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Statement s1 = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statement s2 = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new If(e,s1,s2,eleft,eright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Statement ::= LEFT_CURLY StatementList RIGHT_CURLY 
            {
              Statement RESULT =null;
		int slleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		StatementList sl = (StatementList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Block(sl,slleft,slright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // StatementList ::= 
            {
              StatementList RESULT =null;
		 RESULT = new StatementList(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("StatementList",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // StatementList ::= Statement StatementList 
            {
              StatementList RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int slright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		StatementList sl = (StatementList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 sl.addElement(s); RESULT = sl; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("StatementList",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Type ::= ID 
            {
              Type RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new IdentifierType(i.toString(),ileft,iright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Type ::= INT 
            {
              Type RESULT =null;
		 RESULT = new IntegerType(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Type ::= BOOLEAN 
            {
              Type RESULT =null;
		 RESULT = new BooleanType(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Type ::= INT LEFT_B RIGHT_B 
            {
              Type RESULT =null;
		 RESULT = new IntArrayType(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Formal ::= Type ID 
            {
              Formal RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Formal(t,i,tleft,tright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Formal",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // FormalRest ::= 
            {
              FormalList RESULT =null;
		 RESULT = new FormalList(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FormalRest",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // FormalRest ::= FormalRest Formal COMMA 
            {
              FormalList RESULT =null;
		int frleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int frright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		FormalList fr = (FormalList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Formal f = (Formal)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 fr.addElement(f); RESULT = fr; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FormalRest",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // FormalList ::= 
            {
              FormalList RESULT =null;
		 RESULT = new FormalList(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FormalList",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // FormalList ::= FormalRest Formal 
            {
              FormalList RESULT =null;
		int frleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int frright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		FormalList fr = (FormalList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Formal f = (Formal)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 fr.addElement( f ); RESULT = fr; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FormalList",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // FormalSeparate ::= error RIGHT_PAREN 
            {
              FormalList RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 parser.printError(eleft,eright); RESULT = new ErroneousFormalList(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FormalSeparate",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // FormalSeparate ::= FormalList RIGHT_PAREN 
            {
              FormalList RESULT =null;
		int flleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int flright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		FormalList fl = (FormalList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = fl; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FormalSeparate",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // MethodDecl ::= error RIGHT_CURLY 
            {
              MethodDecl RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 parser.printError(eleft, eright); RESULT = new ErroneousMethodDecl(eleft,eright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MethodDecl",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // MethodDecl ::= PUBLIC Type ID LEFT_PAREN FormalSeparate LEFT_CURLY VarDeclList StatementList RETURN Exp SEMI RIGHT_CURLY 
            {
              MethodDecl RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int flleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int flright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		FormalList fl = (FormalList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		VarDeclList v = (VarDeclList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		StatementList sl = (StatementList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new MethodDecl(t,i,fl,v,sl,e,ileft,iright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MethodDecl",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // MethodDeclList ::= 
            {
              MethodDeclList RESULT =null;
		 RESULT = new MethodDeclList(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MethodDeclList",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // MethodDeclList ::= MethodDeclList MethodDecl 
            {
              MethodDeclList RESULT =null;
		int mdlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int mdlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		MethodDeclList mdl = (MethodDeclList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int mdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		MethodDecl md = (MethodDecl)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 mdl.addElement(md); RESULT = mdl; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MethodDeclList",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // VarDecl ::= error SEMI 
            {
              VarDecl RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 parser.printError(eleft, eright); RESULT = new ErroneousDecl(eleft,eright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarDecl",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // VarDecl ::= Type ID SEMI 
            {
              VarDecl RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new VarDecl(t,i,tleft,tright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarDecl",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // VarDeclList ::= 
            {
              VarDeclList RESULT =null;
		 RESULT = new VarDeclList(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarDeclList",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // VarDeclList ::= VarDeclList VarDecl 
            {
              VarDeclList RESULT =null;
		int vdlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vdlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		VarDeclList vdl = (VarDeclList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int vdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VarDecl vd = (VarDecl)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 vdl.addElement(vd); RESULT = vdl; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarDeclList",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // ClassDecl ::= error RIGHT_CURLY 
            {
              ClassDecl RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 parser.printError(eleft, eright); RESULT = new ErroneousClassDecl();  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ClassDecl",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // ClassDecl ::= CLASS ID EXTENDS ID LEFT_CURLY VarDeclList MethodDeclList RIGHT_CURLY 
            {
              ClassDecl RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Identifier name = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int parentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int parentright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Identifier parent = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		VarDeclList v = (VarDeclList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int mdlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int mdlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		MethodDeclList mdl = (MethodDeclList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ClassDeclExtends(name,parent,v,mdl,nameleft,nameright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ClassDecl",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // ClassDecl ::= CLASS ID LEFT_CURLY VarDeclList MethodDeclList RIGHT_CURLY 
            {
              ClassDecl RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Identifier name = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		VarDeclList v = (VarDeclList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int mdlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int mdlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		MethodDeclList mdl = (MethodDeclList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ClassDeclSimple(name,v,mdl,nameleft,nameright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ClassDecl",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // ClassDeclList ::= 
            {
              ClassDeclList RESULT =null;
		 RESULT = new ClassDeclList(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ClassDeclList",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // ClassDeclList ::= ClassDeclList ClassDecl 
            {
              ClassDeclList RESULT =null;
		int cdlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cdlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ClassDeclList cdl = (ClassDeclList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ClassDecl cd = (ClassDecl)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 cdl.addElement(cd); RESULT = cdl; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ClassDeclList",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // MainMethod ::= error RIGHT_CURLY 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 parser.printError(eleft,eright); RESULT = new ErroneousStatement(eleft,eright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MainMethod",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // MainMethod ::= LEFT_CURLY Statement RIGHT_CURLY 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = s; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MainMethod",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // MainParams ::= error RIGHT_PAREN 
            {
              Identifier RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 parser.printError(eleft,eright); RESULT = new Identifier("ERROR",eleft,eright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MainParams",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // MainParams ::= LEFT_PAREN STRING LEFT_B RIGHT_B ID RIGHT_PAREN 
            {
              Identifier RESULT =null;
		int argsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Identifier args = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = args; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MainParams",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // mainclass ::= CLASS ID LEFT_CURLY PUBLIC STATIC VOID_MAIN MainParams MainMethod RIGHT_CURLY 
            {
              MainClass RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Identifier name = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Identifier args = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new MainClass(name,args,s,nameleft,nameright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("mainclass",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // MiniJavaProgram ::= mainclass ClassDeclList 
            {
              Program RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		MainClass m = (MainClass)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ClassDeclList d = (ClassDeclList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Program(m, d,mleft,mright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MiniJavaProgram",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= MiniJavaProgram EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Program start_val = (Program)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

